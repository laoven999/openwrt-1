steps:
  - name: Checkout
    uses: actions/checkout@v2

  - name: Set up Node.js 20.x
    uses: actions/setup-node@v4
    with:
      node-version: '20.x'

  - name: Initialization environment
    env:
      DEBIAN_FRONTEND: noninteractive
    run: |
      # 初始化环境
      # 删除旧的软件源、文件和目录
      sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
      # 更新软件源
      sudo -E apt-get -qq update
      # 安装依赖包
      sudo -E apt-get -qq install $(curl -fsSL git.io/depends-ubuntu-2004) || exit 1
      # 清理无用的软件包
      sudo -E apt-get -qq autoremove --purge
      # 清理缓存
      sudo -E apt-get -qq clean
      # 设置时区
      sudo timedatectl set-timezone "$TZ"
      # 创建工作目录
      sudo mkdir -p /workdir
      # 设置工作目录的所有者
      sudo chown $USER:$GROUPS /workdir

  - name: Clone source code
    working-directory: /workdir
    run: |
      # 克隆源代码
      df -hT $PWD
      git clone $REPO_URL -b $REPO_BRANCH openwrt || exit 1
      ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

  - name: Load custom feeds
    run: |
      # 加载自定义 feeds
      # 如果存在 feeds 配置文件，则将其移动到 openwrt/feeds.conf.default
      [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
      # 设置 DIY_P1_SH 脚本的执行权限
      chmod +x $DIY_P1_SH
      cd openwrt
      # 执行 DIY_P1_SH 脚本
      $GITHUB_WORKSPACE/$DIY_P1_SH || exit 1

  - name: Update feeds
    run: |
      # 更新 feeds
      cd openwrt && ./scripts/feeds update -a || exit 1

  - name: Install dependencies
    run: |
      # 安装依赖
      cd openwrt
      make package/symlinks
      make -j$(nproc) defconfig
      make -j$(nproc) download
      make -j$(nproc) || exit 1

  - name: Install feeds
    run: |
    # 安装 feeds
    cd openwrt && ./scripts/feeds install -a || exit 1

  - name: Load custom configuration
    run: |
      # 加载自定义配置
      # 如果存在 files 目录，则将其移动到 openwrt/files
      [ -e files ] && mv files openwrt/files
      # 如果存在 CONFIG_FILE 文件，则将其移动到 openwrt/.config
      [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
      # 设置 DIY_P2_SH 脚本的执行权限
      chmod +x $DIY_P2_SH
      cd openwrt
      # 执行 DIY_P2_SH 脚本
      $GITHUB_WORKSPACE/$DIY_P2_SH || exit 1

  - name: SSH connection to Actions
    uses: P3TERX/ssh2actions@v1.0.0
    if: github.event.inputs.ssh == 'true' || contains(github.event.action, 'ssh')
    env:
      TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
      TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

  - name: Download package
    id: package
    run: |
      # 下载软件包
      cd openwrt
      make defconfig || exit 1
      make download -j8 || exit 1
      # 查找并显示大小为 -1024c 的文件
      find dl -size -1024c -exec ls -l {} \;
      # 删除大小为 -1024c 的文件
      find dl -size -1024c -exec rm -f {} \;

  - name: Compile the firmware
    id: compile
    run: |
      # 编译固件
      cd openwrt
      echo -e "$(nproc) thread compile"
      make -j$(nproc) || make -j1 || make -j1 V=s || exit 1

  - name: Check space usage
    # Remove unnecessary if condition
    run: df -hT

  - name: Upload bin directory
    uses: actions/upload-artifact@main
    if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
    with:
      name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
      path: openwrt/bin

  - name: Organize files
    id: organize
    if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
    run: |
      # 整理文件
      cd openwrt/bin/targets/*/*
      # 删除 packages 目录
      rm -rf packages
      # 将当前目录路径保存到环境变量 FIRMWARE 中
      echo "FIRMWARE=$PWD" >> $GITHUB_ENV
      echo "status=success" >> $GITHUB_OUTPUT

  - name: Upload firmware directory
    uses: actions/upload-artifact@main
    if: steps.organize.outputs.status == 'success' && !cancelled()
    with:
      name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
      path: ${{ env.FIRMWARE }}

  - name: Generate release tag
    id: tag
    if: env.UPLOAD_RELEASE == 'true' && !cancelled()
    run: |
      # 生成发布标签
      echo "release_tag=$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT
      touch release.txt
      [ ${UPLOAD_GOFILE} = true && ${{ steps.gofile.outputs.url }} ] && echo "🔗 [GoFile](${{ steps.gofile.outputs.url }})" >> release.txt
      echo "status=success" >> $GITHUB_OUTPUT

  - name: Upload firmware to release
    uses: softprops/action-gh-release@master
    if: steps.tag.outputs.status == 'success' && !cancelled()
    env:
      GITHUB_TOKEN: ${{ secrets.OPEN }}
    with:
      tag_name: ${{ steps.tag.outputs.release_tag }}
      body_path: release.txt
      files: ${{ env.FIRMWARE }}/*

  - name: Delete workflow runs
    uses: Mattraks/delete-workflow-runs@main
    with:
      retain_days: 0
      keep_minimum_runs: 2

  - name: Remove old Releases
    uses: dev-drprasad/delete-older-releases@master
    if: env.UPLOAD_RELEASE == 'true' && !cancelled()
    with:
      keep_latest: 3
      delete_tags: true
    env:
      GITHUB_TOKEN: ${{ secrets.OPEN }}
